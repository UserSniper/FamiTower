MEMORY {
    ZP:     start = $00,    size = $0100, type = rw, file = "", define = yes;
    OAM_MEM:    start = $0200,  size = $0100, type = rw, file = "", define = yes;
    RAM:    start = $0300,  size = $0500, type = rw, file = "", define = yes;
    SRAM:   start = $6000, size = $2000, type = rw, file = "", define = yes;
    HDR:    start = $0000,  size = $0010, type = ro, file = %O, fill = yes, fillval = $00;
    ROM_MA_00: start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_MB_00: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_MA_01: start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_MB_01: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_MA_02: start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_MB_02: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    # MMC3 uses exclusively 8kb banks, so we have to break up the 16kb of fixed storage, too.
    PRG:    start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    PRG_2:  start = $e000, size = $1ffa, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    VEC:    start = $fffa, size = $0006, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_00:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_01:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_02:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_03:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_04:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_05:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_06:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_07:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_08:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_09:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_10:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_11:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_12:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_13:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_14:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_15:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_16:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_17:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_18:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_19:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_20:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_21:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_22:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_23:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_24:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_25:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_26:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_27:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_28:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_29:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_30:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR_M_31:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
}

SEGMENTS {
    ZEROPAGE: load = ZP,  type = zp, define = yes;
    OAM:      load = OAM_MEM, type = bss, align = $100, define = yes;
    BSS:      load = RAM, type = bss, define = yes;
    SRAM:     load = SRAM, type = bss, optional = yes;
    HEADER:   load = HDR, type = ro, define = yes;
    # Banks for mmc3 are split into two groups: 
    # A: The first 8kb section in memory
    # B: The second 8kb section in memory.
    # You can only put banks from section A into the first memory bank, and banks from section B into the second.
    ROM_A_00:   load = ROM_MA_00, type = ro, define = yes;
    ROM_B_00:   load = ROM_MB_00, type = ro, define = yes;
    ROM_A_01:   load = ROM_MA_01, type = ro, define = yes;
    ROM_B_01:   load = ROM_MB_01, type = ro, define = yes;
    ROM_A_02:   load = ROM_MA_02, type = ro, define = yes;
    ROM_B_02:   load = ROM_MB_02, type = ro, define = yes;
    CODE:     load = PRG, type = ro, define = yes;
    RODATA:   load = PRG, type = ro, define = yes;
    DATA:     load = PRG, run = RAM, type = rw, define = yes;
    ONCE:     load = PRG_2, type = ro, define = yes;
    CODE_2:   load = PRG_2, type = ro, define = yes;
    RODATA_2: load = PRG_2, type = ro, define = yes;
    DMC:      load = PRG_2, type = ro, define = yes, align = $100;
    VECTORS:  load = VEC, type = ro, start = $fffa, define = yes;
    CHR_00:    load = CHR_M_00, type = ro, define = yes;
    CHR_01:    load = CHR_M_01, type = ro, define = yes;
    CHR_02:    load = CHR_M_02, type = ro, define = yes;
    CHR_03:    load = CHR_M_03, type = ro, define = yes;
    CHR_04:    load = CHR_M_04, type = ro, define = yes;
    CHR_05:    load = CHR_M_05, type = ro, define = yes;
    CHR_06:    load = CHR_M_06, type = ro, define = yes;
    CHR_07:    load = CHR_M_07, type = ro, define = yes;
    CHR_08:    load = CHR_M_08, type = ro, define = yes;
    CHR_09:    load = CHR_M_09, type = ro, define = yes;
    CHR_10:    load = CHR_M_10, type = ro, define = yes;
    CHR_11:    load = CHR_M_11, type = ro, define = yes;
    CHR_12:    load = CHR_M_12, type = ro, define = yes;
    CHR_13:    load = CHR_M_13, type = ro, define = yes;
    CHR_14:    load = CHR_M_14, type = ro, define = yes;
    CHR_15:    load = CHR_M_15, type = ro, define = yes;
    CHR_16:    load = CHR_M_16, type = ro, define = yes;
    CHR_17:    load = CHR_M_17, type = ro, define = yes;
    CHR_18:    load = CHR_M_18, type = ro, define = yes;
    CHR_19:    load = CHR_M_19, type = ro, define = yes;
    CHR_20:    load = CHR_M_20, type = ro, define = yes;
    CHR_21:    load = CHR_M_21, type = ro, define = yes;
    CHR_22:    load = CHR_M_22, type = ro, define = yes;
    CHR_23:    load = CHR_M_23, type = ro, define = yes;
    CHR_24:    load = CHR_M_24, type = ro, define = yes;
    CHR_25:    load = CHR_M_25, type = ro, define = yes;
    CHR_26:    load = CHR_M_26, type = ro, define = yes;
    CHR_27:    load = CHR_M_27, type = ro, define = yes;
    CHR_28:    load = CHR_M_28, type = ro, define = yes;
    CHR_29:    load = CHR_M_29, type = ro, define = yes;
    CHR_30:    load = CHR_M_30, type = ro, define = yes;
    CHR_31:    load = CHR_M_31, type = ro, define = yes;
}
FEATURES {

    CONDES: segment = INIT,
        type = constructor,
        label = __CONSTRUCTOR_TABLE__,
        count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
        type = destructor,
        label = __DESTRUCTOR_TABLE__,
        count = __DESTRUCTOR_COUNT__;
    CONDES: type = interruptor,
        segment = RODATA,
        label = __INTERRUPTOR_TABLE__,
        count = __INTERRUPTOR_COUNT__;
}